#ifndef _I_MC_DECODER_H_
#define _I_MC_DECODER_H_

struct AVStream;
struct AVPacket;

class IMcDecoder {
public:
	virtual ~IMcDecoder() = default;

	/*************************************************
	 <函数名称>		setFlushStr
	 <功    能>		设置刷新字符串，当解码器遇到拥有该字符串的资源包时刷新解码器。
	 <参数说明>		str	刷新用的字符串
	 <返回值>
	 <函数说明>		这个函数用来设置刷新字符串，当解码器遇到拥有该字符串的资源包时刷新解码器。
	 <作    者>		mrcao
	 <时    间>		2019/5/6
	**************************************************/
	virtual void setFlushStr(const char *str) noexcept = 0;
	/*************************************************
	 <函数名称>		init
	 <功    能>		初始化解码器，通过传入的媒体流初始化相应的解码器。
	 <参数说明>		stream 传入的媒体流
	 <返回值>		初始化成功返回true，否则返回false
	 <函数说明>		这个函数用来初始化解码器，通过传入的媒体流初始化相应的解码器。
	 <作    者>		mrcao
	 <时    间>		2019/5/6
	**************************************************/
	virtual bool init(AVStream *stream) noexcept = 0;
	/*************************************************
	 <函数名称>		addPacket
	 <功    能>		添加资源包，将读取出的资源包添加进解码器中，拥有之后解码
	 <参数说明>		packet 资源包
	 <返回值>
	 <函数说明>		这个函数用来添加资源包，将读取出的资源包添加进解码器中，拥有之后解码
	 <作    者>		mrcao
	 <时    间>		2019/5/6
	**************************************************/
	virtual void addPacket(AVPacket *packet) noexcept = 0;
	/*************************************************
	 <函数名称>		getPacketNum
	 <功    能>		获取还未解码的资源包数量
	 <参数说明>		
	 <返回值>		剩余资源包数量
	 <函数说明>		这个函数用来获取还未解码的资源包数量
	 <作    者>		mrcao
	 <时    间>		2019/5/6
	**************************************************/
	virtual int getPacketNum() noexcept = 0;
	/*************************************************
	 <函数名称>		clearPacket
	 <功    能>		清空剩余资源包
	 <参数说明>		
	 <返回值>
	 <函数说明>		这个函数用来清空剩余资源包
	 <作    者>		mrcao
	 <时    间>		2019/5/6
	**************************************************/
	virtual void clearPacket() noexcept = 0;
};

#endif // ! _I_MC_DECODER_H_

